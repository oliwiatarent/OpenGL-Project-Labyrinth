    _rayDir.z = -(rayDir.x)*sin(angle_horizontal) + (rayDir.z)*cos(angle_horizontal);
    _rayDir.y = -(rayDir.x)*cos(angle_horizontal)*sin(angle_vertical) + (rayDir.y)*cos(angle_vertical) - (rayDir.z)*sin(angle_horizontal)*sin(angle_vertical);
    _rayDir.x = (rayDir.x)*cos(angle_horizontal)*cos(angle_vertical) + (rayDir.y)*sin(angle_vertical) + (rayDir.z)*sin(angle_horizontal)*cos(angle_vertical);

    glm::vec3 _rayOrigin; // rayOrigin w układzie współrzędnych drzwi
    _rayOrigin.z = -(rayOrigin.x)*sin(angle_horizontal) + (rayOrigin.z)*cos(angle_horizontal);
    _rayOrigin.y = -(rayOrigin.x)*cos(angle_horizontal)*sin(angle_vertical) + (rayOrigin.y)*cos(angle_vertical) - (rayOrigin.z)*sin(angle_horizontal)*sin(angle_vertical);
    _rayOrigin.x = (rayOrigin.x)*cos(angle_horizontal)*cos(angle_vertical) + (rayOrigin.y)*sin(angle_vertical) + (rayOrigin.z)*sin(angle_horizontal)*cos(angle_vertical);